#!/bin/sh

set -a

prefix="/usr/local"
maildir="${XDG_DATA_HOME:-$HOME/.local/share}/mail"
muttshare="$prefix/share/mutt-wizard"
cachedir="${XDG_CACHE_HOME:-$HOME/.cache}/mutt-wizard"
muttrc="${XDG_CONFIG_HOME:-$HOME/.config}/mutt/muttrc"
accdir="${XDG_CONFIG_HOME:-$HOME/.config}/mutt/accounts"
msmtprc="${XDG_CONFIG_HOME:-$HOME/.config}/msmtp/config"
msmtplog="${XDG_STATE_HOME:-$HOME/.local/state}/msmtp/msmtp.log"
mbsyncrc="${MBSYNCRC:-$HOME/.mbsyncrc}"
mpoprc="${XDG_CONFIG_HOME:-$HOME/.config}/mpop/config"
mpoptemp="$muttshare/mpop-temp"
mbsynctemp="$muttshare/mbsync-temp"
mutttemp="$muttshare/mutt-temp"
msmtptemp="$muttshare/msmtp-temp"
onlinetemp="$muttshare/online-temp"
notmuchtemp="$muttshare/notmuch-temp"
# With the use of templates, it's impossible to use parameter substitution.
# Therefore, some default variables that might be otherwise overwritten are set
# here.
iport="993"
sport="465"
imapssl="IMAPS"
tlsline="tls_starttls off"
maxmes="0"

alias mbsync='mbsync -c "$mbsyncrc"'

# mbsync now requires "Far/Near" rather than "Master/Slave", but Ubuntu/Debian
# have the older version.
if command -V apt-get >/dev/null 2>&1; then
	master="Master"
	slave="Slave"
else
	master="Far"
	slave="Near"
fi

for x in "/etc/ssl/certs/ca-certificates.crt" \
	"/etc/pki/tls/certs/ca-bundle.crt" "/etc/ssl/cert.pem" \
	"/etc/ssl/ca-bundle.pem" "/etc/pki/tls/cacert.pem" \
	"/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \
	"/usr/local/share/ca-certificates/"; do
	[ -f "$x" ] && sslcert="$x" && break
done || { echo "CA Certificate not found. Please install one or link it to /etc/ssl/certs/ca-certificates.crt" && exit 1; }

checkbasics() {
	command -V gpg >/dev/null 2>&1 && GPG="gpg" || GPG="gpg2"
	PASSWORD_STORE_DIR="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
	[ -r "$PASSWORD_STORE_DIR/.gpg-id" ] || {
		echo "First run \`pass init <yourgpgemail>\` to set up a password archive."
		echo "(If you don't already have a GPG key pair, first run \`$GPG --full-generate-key\`.)"
		exit 1
	}
}

getaccounts() { accounts="$(find -L "$accdir" -type f 2>/dev/null | grep -o "\S*.muttrc" | sed "s|.*/\([0-9]-\)*||;s/\.muttrc$//" | nl)"; }

list() { getaccounts && [ -n "$accounts" ] && echo "$accounts" || exit 1; }

prepmsmtp() {
	mkdir -p "${msmtprc%/*}" "${msmtplog%/*}"
	ln -s "$msmtprc" "$HOME/.msmtprc" 2>/dev/null
	envsubst <"$msmtptemp" >>"$msmtprc"
}

prepmbsync() {
	mkdir -p "${mbsyncrc%/*}"
	[ -f "$mbsyncrc" ] && echo >>"$mbsyncrc"
	envsubst <"$mbsynctemp" >>"$mbsyncrc"
}

prepmpop() {
	mkdir -p "${mpoprc%/*}"
	envsubst <"$mpoptemp" >>"$mpoprc"
}

prepmutt() {
	mkdir -p "${muttrc%/*}" "$accdir"
	envsubst <"$mutttemp" >"$accdir/$fulladdr.muttrc"
	[ ! -f "$muttrc" ] && echo "# vim: filetype=neomuttrc" >"$muttrc"
	! grep -q "^source.*mutt-wizard.muttrc" "$muttrc" && echo "source $muttshare/mutt-wizard.muttrc" >>"$muttrc"
	! grep "^source.*.muttrc" "$muttrc" | grep -qv "$muttshare/mutt-wizard.muttrc" && echo "source $accdir/$fulladdr.muttrc" >>"$muttrc"
	echo "macro index,pager i$idnum '<sync-mailbox><enter-command>source $accdir/$fulladdr.muttrc<enter><change-folder>!<enter>;<check-stats>' \"switch to $fulladdr\"" >>"$muttrc"
}

getprofiles() {
        # TODO: oauth2 only for mbsync right now
	safename="$(echo $fulladdr | sed 's/@/_/g')"
	case "$type" in
	online)
		folder="imaps://$login@$imap:$iport"
		extra="$(envsubst <"$onlinetemp")"
		;;
	pop) prepmpop ;;
	*)
		case "$iport" in
		1143) imapssl=None ;;
		143) imapssl=STARTTLS ;;
		esac
		prepmbsync
		;;
	esac
	prepmsmtp
	prepmutt
	prepnotmuch
}

parsedomains() {
	serverinfo="$(grep "^${fulladdr#*@}" "$muttshare/domains.csv" 2>/dev/null)"

	[ -z "$serverinfo" ] && serverinfo="$(grep "$(echo "${fulladdr#*@}" | sed "s/\.[^\.]*$/\.\\\*/")" "$muttshare/domains.csv" 2>/dev/null)"

	IFS=, read -r service imapsugg iportsugg smtpsugg sportsugg <<EOF
$serverinfo
EOF
	imap="${imap:-$imapsugg}"
	smtp="${smtp:-$smtpsugg}"
	sport="${sport:-$sportsugg}"
	iport="${iport:-$iportsugg}"
}

delete() {
	if [ -z "${fulladdr+x}" ]; then
		echo "Select the account you would like to delete (by number):"
		list || exit 1
		read -r input
		match="^\s*$input\s\+"
	else
		match="\s\+$fulladdr$"
		getaccounts
	fi

	fulladdr="$(echo "$accounts" | grep "$match" | grep -o "\S*@\S*")"

	[ -z "$fulladdr" ] && echo "$fulladdr is not a valid account name." && return 1

	sed -ibu "/IMAPStore $fulladdr-remote$/,/# End profile/d" "$mbsyncrc" 2>/dev/null
	rm -f "$mbsyncrc"bu
	rm -rf "${cachedir:?}/${fulladdr:?}" "$accdir/$fulladdr.muttrc" "$accdir/"[0-9]-"$fulladdr.muttrc"
	sed -ibu "/\([0-9]-\)\?$fulladdr.muttrc/d" "$muttrc" 2>/dev/null
	rm -f "$muttrc"bu
	sed -ibu "/account $fulladdr$/,/^\(\s*$\|account\)/d" "$msmtprc" 2>/dev/null
	rm -f "$msmtprc"bu
	sed -ibu "/account $fulladdr$/,/^\(\s*$\|account\)/d" "$mpoprc" 2>/dev/null
	rm -f "$mpoprc"bu
	pass rm -f "$passprefix$fulladdr" >/dev/null 2>&1
	[ -n "${purge+x}" ] && safename="$(echo $fulladdr | sed 's/@/_/g')" && rm -rf "${cachedir:?}/${safename:?}" "${maildir:?}/${fulladdr:?}"
}

askinfo() {
	[ -z "$fulladdr" ] && echo "Give the full email address to add:" &&
		read -r fulladdr
	while ! echo "$fulladdr" | grep -qE "^.+@.+\.[A-Za-z]+$"; do
		echo "$fulladdr is not a valid email address. Please retype the address:"
		read -r fulladdr
	done
	folder="$maildir/$fulladdr"
	getaccounts
	echo "$accounts" | grep -q "\s$fulladdr$" 2>/dev/null &&
		{ echo "$fulladdr has already been added" && exit 1; }
	{ [ -z "$imap" ] || [ -z "$smtp" ]; } && parsedomains
	[ -z "$imap" ] && echo "Give your email server's IMAP address (excluding the port number):" &&
		read -r imap
	[ -z "$smtp" ] && echo "Give your email server's SMTP address (excluding the port number):" &&
		read -r smtp
	case $sport in
	587) tlsline="# tls_starttls" ;;
	esac
	[ -z "$realname" ] && realname="${fulladdr%%@*}"
	[ -z "$passprefix" ] && passprefix=""
	hostname="${fulladdr#*@}"
	login="${login:-$fulladdr}"
        [ -f "$oauthtokenfile" ] ||
            printf "If you want to use OAUTH2 (for Microsoft or Google), input path to pre-created token file (see help). Otherwise, leave empty: " &&
            read -r oauthtokenfile

        if [ -f "$oauthtokenfile" ]; then
            authtype_msmtp=xoauth2
            authtype_mbsync=XOAUTH2
            printf "Token will be moved to '%s', do you want to remove the original token file [y/N]? " "$PASSWORD_STORE_DIR/$passprefix$fulladdr.tokens"
            read -r prompt
            case "$prompt" in
                y|Y) mv "$oauthtokenfile" "$PASSWORD_STORE_DIR/$passprefix$fulladdr.tokens" ;;
                *) cp "$oauthtokenfile" "$PASSWORD_STORE_DIR/$passprefix$fulladdr.tokens" ;;
            esac
        else
            [ -n "$oauthtokenfile" ] && echo "Token file not found"
            authtype_msmtp=on
            authtype_mbsync=LOGIN
            if [ -n "${password+x}" ]; then
                insertpass
            else
                getpass
            fi
        fi
        pass_cmdline="$(pass_cmdline)"
}

insertpass() {
	printf "%s" "$password" | pass insert -fe "$PASSWORD_STORE_DIR/$passprefix$fulladdr"
}

errorexit() {
	echo "Log-on not successful."
	case "$imap" in
	imap.mail.me.com)
		echo "This account with $service is using Apple's iCloud servers, which disable all non-Apple applications by default.
Please be sure you either enable third-party applications, or create an app-specific password, or best of all, stop using Apple."
		;;
	esac
	exit 1
}

pass_cmdline() {
    if [ -f "$oauthtokenfile" ]; then
        # do not use pass insert to not clutter pass git history with token updates
        encrypt_pipe="$GPG -qe $(printf -- " -r %s" $(cat "$PASSWORD_STORE_DIR/.gpg-id"))"
        printf '%s ' /usr/share/neomutt/oauth2/mutt_oauth2.py --encryption-pipe "$encrypt_pipe" "$passprefix$fulladdr.tokens"
    else
        printf '%s ' pass "$passprefix$fulladdr"
    fi
}

getpass() { while :; do
	pass rm -f "$passprefix$fulladdr" >/dev/null 2>&1
	pass insert -f "$passprefix$fulladdr" && break
done; }

getboxes() {
        # TODO: add oauth2 curl
        # in the meantime, get box names after syncing from folder structure:
        #for d in "$maildir"/*
        #do
        #    echo "$(basename "$d"):"
        #    mailboxes="$(find "$d" -mindepth 1 -type d -not -name 'cur' -not -name 'new' -not -name 'tmp' -printf '="%P" ')"
        #    printf "\tmailboxes %s\n\n" "$mailboxes"
        #done

	if [ -f "$oauthtokenfile" ] || [ -n "${force+x}" ]; then
		mailboxes="$(printf "INBOX\\nDrafts\\nJunk\\nTrash\\nSent\\nArchive")"
	else
		info="$(curl --location-trusted -s -m 5 --user "$login:$(pass show "$passprefix$fulladdr")" --url "${protocol:-imaps}://$imap:${iport:-993}")"
		[ -z "$info" ] && errorexit
		mailboxes="$(echo "$info" | grep -v HasChildren | sed "s/.*\" //;s/\"//g" | tr -d '\r')"
	fi
	[ "$type" = "pop" ] && mailboxes="INBOX"
	for x in $(
		sed -n "/^macro.* i[0-9] / s/\(^macro.* i\| .*\)//gp " "$muttrc" 2>/dev/null | sort -u
		echo 0
	); do
		idnum=$((idnum + 1))
		[ "$idnum" -eq "$x" ] || break
	done
	toappend="mailboxes $(echo "$mailboxes" | sed "s/^/\"=/;s/$/\"/;s/'/\\\'/g" | paste -sd ' ' -)"
}

finalize() {
	echo "$toappend" >>"$accdir/$fulladdr.muttrc"
	[ "$type" != "online" ] && echo "$mailboxes" | xargs -I {} mkdir -p "$maildir/$fulladdr/{}/cur" "$maildir/$fulladdr/{}/tmp" "$maildir/$fulladdr/{}/new"
	mkdir -p "$cachedir/$safename/bodies"
	echo "$fulladdr (account #$idnum) added successfully."
	command -V urlview >/dev/null 2>&1 && [ ! -f "$HOME/.urlview" ] && echo "COMMAND \$BROWSER" >"$HOME/.urlview"
	return 0
}

prepnotmuch() {
	[ -z "$NOTMUCH_CONFIG" ] && NOTMUCH_CONFIG="$HOME/.notmuch-config"
	[ -f "$NOTMUCH_CONFIG" ] && return 0
	envsubst <"$notmuchtemp" >"$NOTMUCH_CONFIG"
}

togglecron() {
	cron="$(mktemp)"
	crontab -l >"$cron"
	if grep -q mailsync "$cron"; then
		echo "Removing automatic mailsync..."
		sed -ibu /mailsync/d "$cron"
		rm -f "$cron"bu
	else
		echo "Adding automatic mailsync every ${cronmin:-10} minutes..."
		echo "*/${cronmin:-10} * * * * $prefix/bin/mailsync" >>"$cron"
	fi &&
		crontab "$cron"
	rm -f "$cron"
}

setact() { if [ -n "${action+x}" ] && [ "$action" != "$1" ]; then
	echo "Running $1 with $action..."
	echo "Incompatible options given. Only one action may be specified per run."
	exit 1
else
	action="$1"
fi; }

mwinfo() {
	cat <<EOF
mw: mutt-wizard, auto-configure email accounts for mutt
including downloadable mail with \`isync\`.

Main actions:
  -a your@email.com	Add an email address
  -l			List email addresses configured
  -d			Remove an already added address
  -D your@email.com	Force remove account without confirmation
  -t number		Toggle automatic mailsync every <number> minutes
  -T			Toggle automatic mailsync
  -r			Reorder account numbers

Options allowed with -a:
  -u	Account login name if not full address
  -n	"Real name" to be on the email account
  -i	IMAP/POP server address
  -I	IMAP/POP server port
  -s	SMTP server address
  -S	SMTP server port
  -x	Password for account (recommended to be in double quotes)
  -o    Registered OAUTH2 token file path. See mw(1) for more info.
  -p	Add for a POP server instead of IMAP.
  -P	Pass Prefix (prefix of the file where password is stored)
  -X	Delete an account's local email too when deleting.
  -o	Configure address, but keep mail online.
  -f	Assume typical English mailboxes without attempting log-on.

NOTE: Once at least one account is added, you can run
\`mbsync -a\` to begin downloading mail.

To change an account's password, run \`pass edit '$passprefix'your@email.com\`.
EOF
}

reorder() {
	tempfile="$(mktemp -u)"
	trap 'rm -f $tempfile' HUP INT QUIT TERM PWR EXIT
	echo "# Carefully reorder these accounts with the desired numbers in the first column.
# DO NOT reorder rows or rename the accounts in the second column." >"$tempfile"
	sed -n "
	/ i[0-9] / s?\(.* i\|'<sync.*/\|\.muttrc.*\)??g p
	" "$muttrc" >>"$tempfile"
	${EDITOR:-vim} "$tempfile" || exit 1
	sed -i -e 's/#.*//' -e '/^$/d' "$tempfile"
	default="$(sort -n "$tempfile" | head -n 1)"
	default="${default#* }"
	sed -ibu "
  /.* i[0-9] .*.muttrc/d
  /^source.*accounts.*.muttrc/d
  " "$muttrc" 2>/dev/null
	rm -f "$muttrc"bu
	awk -v a="$accdir" -v d="$default" ' BEGIN { print "source "a"/"d".muttrc" }
		{
		print "macro index,pager i"$1" '\''<sync-mailbox><enter-command>source "a"/"$2".muttrc<enter><change-folder>!<enter>;<check-stats>'\'' \"switch to "$2"\""
		}
	' "$tempfile" >>"$muttrc"
}

while getopts "rfpXlhodTYD:y:i:I:s:S:u:a:n:P:x:O:m:t:" o; do case "${o}" in
	l) setact list ;;
	r) setact reorder ;;
	d) setact delete ;;
	D)
		setact delete
		fulladdr="$OPTARG"
		;;
	y)
		setact sync
		fulladdr="$OPTARG"
		;;
	Y) setact sync ;;
	a)
		setact add
		fulladdr="$OPTARG"
		;;
	i)
		setact add
		imap="$OPTARG"
		;;
	I)
		setact add
		iport="$OPTARG"
		;;
	s)
		setact add
		smtp="$OPTARG"
		;;
	S)
		setact add
		sport="$OPTARG"
		;;
	u)
		setact add
		login="$OPTARG"
		;;
	n)
		setact add
		realname="$OPTARG"
		;;
	P)
		setact add
		passprefix="$OPTARG"
		;;
	m)
		setact add
		maxmes="$OPTARG"
		;;
	o)
		setact add
		type="online"
		;;
	p)
		setact add
		type="pop"
		protocol="pop3s"
		iport="${iport:-995}"
		;;
	f)
		setact add
		force=True
		;;
	x)
		setact add
		password="$OPTARG"
		;;
        O)      
                setact add
                oauthtokenfile="$OPTARG"
                ;;
	X)
		setact delete
		purge=True
		;;
	t)
		setact toggle
		cronmin="$OPTARG"
		;;
	T) setact toggle ;;
	h) setact info ;;
	\?)
		echo "See \`$(basename $0) -h\` for possible options and help."
		exit 1
		;;
	esac done

[ -z "$action" ] && action="info"

case "$action" in
list) list ;;
add) checkbasics && askinfo && getboxes && getprofiles && finalize ;;
delete) delete ;;
sync)
	echo "\`mw -y\` and \`mw -Y\` are now deprecated and will be removed in a future update. Please switch to using \`mailsync\`."
	mailsync $fulladdr
	;;
toggle) togglecron ;;
reorder) reorder ;;
info)
	mwinfo
	exit 1
	;;
esac
